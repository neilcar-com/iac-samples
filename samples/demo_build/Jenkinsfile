node {

    withCredentials([string(credentialsId: 'TL_URL', variable: 'TL_URL'), string(credentialsId: 'GCP_CRED_JSON', variable: 'GCP_CRED_JSON'), string(credentialsId: 'TL_LICENSE', variable: 'TL_LICENSE'), string(credentialsId: 'TL_TOKEN', variable: 'TL_TOKEN')]) {

        def app

        stage('Clone repository') {
            /* Let's make sure we have the repository cloned to our workspace */

            checkout scm
        }

        stage('Build images') {
            /* This builds the actual image; synonymous to
             * docker build on the command line */

            app = docker.build("gcr.io/cto-sandbox/cto/ansible-demo-build:${env.BUILD_NUMBER}")
            terraform = docker.build("gcr.io/cto-sandbox/cto/terraform-demo-build:${env.BUILD_NUMBER}", "terraform/")

        }

        stage('Test image') {


        try {
          stage ('Build Environment'){
            app.inside("--entrypoint='' -e '''GCP_CREDS_JSON = ${env.GCP_CRED_JSON}''' -e '''TL_TOKEN = ${env.TL_TOKEN}''' -e '''TL_LICENSE = ${env.TL_LICENSE}''' -e '''TL_URL = ${env.TL_URL}''' -v /etc/letsencrypt/:/etc/letsencrypt/") {
            
                sh "ansible-playbook /ansible/playbooks/test_config_create.yml --connection=local -v"   
                sh "ansible-playbook -v -i /hosts/inventory.yml /ansible/playbooks/my_lab.yml" 

            } 
          }
          stage ('Test Environment'){
            def CONSOLEURL = "console-${env.BRANCH_NAME.toLowerCase()}-${env.BUILD_NUMBER}.build-user.lab.twistlock.com"
            CONSOLEURL = CONSOLEURL.replaceAll('_','-')
            sh "curl -sL https://deb.nodesource.com/setup_10.x -o nodesource_setup.sh"
            sh "bash nodesource_setup.sh"
            sh "apt install npm"
            sh "npm install -g newman"
            sh "newman run tests/twistlock_api_tests.json --env-var username=build-user --env-var password='stash.denote.wireless.gallows.tiger.margarine' --env-var consoleaddr=${CONSOLEURL}"
          }
        }
        catch (error)
        {
            throw error
        }
        catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException interruptEx) 
        {
            app.inside("--entrypoint='' -e '''GCP_CREDS_JSON = ${env.GCP_CRED_JSON}''' -e '''TL_TOKEN = ${env.TL_TOKEN}''' -e '''TL_LICENSE = ${env.TL_LICENSE}''' -e '''TL_URL = ${env.TL_URL}''' -v /etc/letsencrypt/:/etc/letsencrypt/") {
                    sh "ansible-playbook /ansible/playbooks/test_config_create.yml --connection=local -v"
                    sh "ansible-playbook -i /hosts/inventory.yml /ansible/playbooks/delete_lab.yml -v"
            }
          throw interruptEx
        }

        finally {
            app.inside("--entrypoint='' -e '''GCP_CREDS_JSON = ${env.GCP_CRED_JSON}''' -e '''TL_TOKEN = ${env.TL_TOKEN}''' -e '''TL_LICENSE = ${env.TL_LICENSE}''' -e '''TL_URL = ${env.TL_URL}''' -v /etc/letsencrypt/:/etc/letsencrypt/") {
           

                    sh "ansible-playbook /ansible/playbooks/test_config_create.yml --connection=local -v"
                    sh "ansible-playbook -i /hosts/inventory.yml /ansible/playbooks/delete_lab.yml -v"

                }

            }

        }

        stage('Push image') {
            docker.withRegistry('https://gcr.io', 'gcr:cto-sandbox') {
                app.push("${env.BRANCH_NAME}_${env.BUILD_NUMBER}")
                app.push("${env.BRANCH_NAME}")
                terraform.push("${env.BRANCH_NAME}_${env.BUILD_NUMBER}")
                terraform.push("${env.BRANCH_NAME}")
            }


        }
    }
}
