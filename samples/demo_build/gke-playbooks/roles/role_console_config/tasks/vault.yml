- name: Create /opt/vault/
  file:
    dest: /opt/vault
    state: directory

- name: Create /opt/vault/config
  file:
    dest: /opt/vault/config
    state: directory

- name: Copy vault config
  copy:
    src: roles/role_console_config/files/config.hcl
    dest: /opt/vault/config/config.hcl


- name: Start Hashicorp Vault
  docker_container:
    name: vaultserver
    image: "{{ vault_img }}"
    env:
        VAULT_ADDR: "http://127.0.0.1:8200"
        SKIP_SETCAP: true
    volumes:
        - "/opt/vault:/vault"
    ports:
        - "8200:8200"
#  capabilities:
#        - IPC_LOCK
    restart_policy: always
    state: started
    command: server
    timeout: 1200
  environment:
    DEFAULT_TIMEOUT_SECONDS: 200
    COMPOSE_HTTP_TIMEOUT: 200

- name: Init vault
  command: docker exec vaultserver vault operator init
  register: vaultinit_out

- name: Write out config info
  copy:
    content: "{{ vaultinit_out.stdout }}"
    dest: "files/{{ groups['console'][0] }}_vault_config.txt"
  delegate_to: localhost

- name: Initialize unseal_keys list
  set_fact:
    unseal_keys: [ ]    

- name: Get unseal key
  set_fact:
    unseal_keys: "{{ unseal_keys}} + [ '{{ item.split(': ')[1] }}' ]"
  with_items:
    - "{{ vaultinit_out.stdout_lines[0:3] }}"

- name: Get root token
  set_fact:
    root_token: "{{ vaultinit_out.stdout_lines[6].split(': ')[1] }}"

- debug:
    var: unseal_keys

- name: Unseal the vault
  command: "docker exec vaultserver vault operator unseal {{ item }}"
  with_items:
    - "{{ unseal_keys }}"
  register: task_result
  until: task_result.rc == 0
  retries: 10
  delay: 1
  # add retries here to overcome OCI runtime exec transient failures


- name: Vault auth
  command: "docker exec vaultserver vault auth {{ root_token }}"

# vault_secrets can safely be overridden in all.yml, vault_secrets_required should not be.
- name: Store a secret
  command: docker exec vaultserver vault write secret/{{ item.name }} "{{ item.key }}={{ item.value }}"
  with_items:
    - "{{ vault_secrets }}"
    - "{{ vault_secrets_required }}"
  # This fails occasionally for no clear reason
  register: result
  retries: 2
  delay: 10
  until: result is succeeded

- name: Configure secret store in console (<=2.5)
  uri:
    url: "{{ twistlock_console }}/api/v1/settings/secrets"
    method: POST
    user: "{{ console_user }}"
    password: "{{ console_password }}"
    body: '{"refreshPeriodHours":24,"secretsStores":[{"token":{"plain":"{{ root_token }}","encrypted":""},"caCert":{"plain":"","encrypted":""},"name":"Hashi","type":"hashicorp","url":"http://{{ ansible_fqdn }}:8200"}]}'
    force_basic_auth: yes
    body_format: json
    validate_certs: no
    status_code: 200,400

- name: Store vault token in cred store (18.11+)
  uri:
    url: "{{ twistlock_console }}/api/v1/credentials"
    method: POST
    user: "{{ console_user }}"
    password: "{{ console_password }}"
    body: '{"secret":{"plain":"{{ root_token }}"},"serviceAccount":{},"type":"apiToken","_id":"Hashi token"}'
    force_basic_auth: yes
    body_format: json
    validate_certs: no
    status_code: 200,400,404

- name: Configure secret store in console (18.11+)
  uri:
    url: "{{ twistlock_console }}/api/v1/settings/secrets"
    method: POST
    user: "{{ console_user }}"
    password: "{{ console_password }}"
    body: '{"refreshPeriodHours":24,"secretsStores":[{"credentialId":"Hashi token","useAWSRole":false,"caCert":{"plain":"","encrypted":""},"name":"Hashi","type":"hashicorp","url":"http://{{ ansible_fqdn }}:8200"}]}'
    force_basic_auth: yes
    body_format: json
    validate_certs: no
    status_code: 200,400,404,500

- name: Build empty secrets rule
  set_fact:
    secret_rule_body: [ ]

# required rules should not be overridden, secrets_rules can be safely overridden.
- name: Put together rules
  set_fact:
    secret_rule_body: '{{ secret_rule_body }} + [{"resources":{"containers":["*"],"images":["{{ item.images }}"],"hosts":["*"],"labels":["*"]},"secrets":[{"name":"{{ item.name }}","store":"Hashi","folder":"secret/{{ item.secretname }}","key":"{{ item.secretkey }}","safe":""}],"name":"{{ item.rule_name }}","injection":"{{ item.injection }}"}]'
  with_items:
    - "{{ secrets_rules }}"
    - "{{ secrets_rules_required }}"

- name: Configure secret rule
  uri:
    url: "{{ twistlock_console }}/api/v1/policies/secrets"
    method: PUT
    user: "{{ console_user }}"
    password: "{{ console_password }}"
    body: '{"_id":"secrets","rules":{{ secret_rule_body }}}'
    force_basic_auth: yes
    body_format: json
    validate_certs: no
    status_code: 200

- name: Add /opt/vault/unseal.sh
  template:
    src: vault/unseal.sh.j2
    dest: /opt/vault/unseal.sh
    mode: 755


- name: Unseal vault on reboot
  cron:
    name: "Unseal vault on reboot"
    special_time: reboot
    job: "/opt/vault/unseal.sh"
