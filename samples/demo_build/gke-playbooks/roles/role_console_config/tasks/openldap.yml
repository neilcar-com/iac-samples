- name: Set ldap_groups
  set_fact:
    ldap_groups:
    - group: admins
      twistlockgroup: admin
      gid: 500
      twistlockcollections: 
    - group: secops
      twistlockgroup: operator
      gid: 501
      twistlockcollections: 
    - group: devops
      twistlockgroup: devOps
      twistlockcollections: '"Sock-Shop", "Twistlock-Demo"'
      gid: 502
    - group: auditor
      twistlockgroup: auditor
      twistlockcollections: '"Sock-Shop", "Twistlock-Demo"'
      gid: 503
  when: ldap_groups is undefined

- name: Build base_dn
  set_fact:
    base_dn: "dc={{ domain_root.split('.') | join (',dc=') }}"

- name: Copy openldap YAML
  template:
    src: openldap/ldap-deployment.yml.j2
    dest: /opt/ldap-deployment.yml

- name: Start openldap
  command: "kubectl apply -f /opt/ldap-deployment.yml"

- name: Get OpenLDAP svc clusterIP
  shell: kubectl get service ldap-service -n infra -o jsonpath='{.spec.clusterIP}'
  register: ol_clusterIP

- name: Install ldap-utils
  apt: name=ldap-utils state=latest

- name: Copy prepopulate.ldif
  template:
    src: openldap/prepopulate.ldif.j2
    dest: /opt/prepopulate.ldif

- name: Wait for LDAP
  wait_for:
    delay: 1
    host: "{{ ol_clusterIP.stdout }}"
    port: 389
    state: started
    timeout: 600

- name: Add users & groups
  shell: "ldapadd -h {{ ol_clusterIP.stdout }} -c -D 'cn=admin,{{ base_dn }}' -w '{{ new_password }}' -f /opt/prepopulate.ldif"
  register: ldapadd_cmd
  failed_when: (ldapadd_cmd.rc != 0 and "Already exists" not in ldapadd_cmd.stderr)

- name: Configure LDAP (<=19.03)
  uri:
    url: "{{ twistlock_console }}/api/v1/settings/ldap"
    method: POST
    user: "{{ console_user }}"
    password: "{{ console_password }}"
    body: '{"enabled":true,"url":"ldap://ldap-service.infra.svc.cluster.local:389","caCert":"","searchBase":"{{ base_dn }}","groupSearchBase":"ou=groups,{{ base_dn }}","userSearchBase":"ou=users,{{ base_dn }}","accountUpn":"cn=admin,{{ base_dn }}","accountPassword":{"encrypted":"","plain":"{{ new_password }}"},"type":"openldap","userSearchIdentifier":"uid"}'
    force_basic_auth: yes
    body_format: json
    validate_certs: no
  register: old_ldap_result
  ignore_errors: true
    # Accounting for the old, single searchbase and the new user/group searchbases.  Ignoring errors here and using the new approach if this fails.

- name: Configure LDAP (>=19.06)
  uri:
    url: "{{ twistlock_console }}/api/v1/settings/ldap"
    method: POST
    user: "{{ console_user }}"
    password: "{{ console_password }}"
    body: '{"enabled":true,"url":"ldap://ldap-service.infra.svc.cluster.local:389","caCert":"","userSearchBase":"{{ base_dn }}","groupSearchBase":"{{ base_dn }}","groupSearchBase":"ou=groups,{{ base_dn }}","userSearchBase":"ou=users,{{ base_dn }}","accountUpn":"cn=admin,{{ base_dn }}","accountPassword":{"encrypted":"","plain":"{{ new_password }}"},"type":"openldap","userSearchIdentifier":"uid"}'
    force_basic_auth: yes
    body_format: json
    validate_certs: no
  when: old_ldap_result is not success


- name: Add groups (18.11)
  uri:
    url: "{{ twistlock_console }}/api/v1/groups"
    method: POST
    user: "{{ console_user }}"
    password: "{{ console_password }}"
    body: '{"role":"{{ item.twistlockgroup }}","ldapGroup":true,"groupName":"{{ item.group }}"}'
    force_basic_auth: yes
    body_format: json
    validate_certs: no
    status_code:
      - 200
      - 409
      # 409 is returned if group already exists
  with_items: "{{ ldap_groups }}"
  when: twistlock_version.split('.')[0] == "18"

- name: Add groups (19.03+)
  uri:
    url: "{{ twistlock_console }}/api/v1/groups"
    method: POST
    user: "{{ console_user }}"
    password: "{{ console_password }}"
    body: '{"role":"{{ item.twistlockgroup }}","ldapGroup":true,"groupName":"{{ item.group }}","collections":[{{ item.twistlockcollections | default() }}]}'
    force_basic_auth: yes
    body_format: json
    validate_certs: no
    status_code:
      - 200
      - 409
      # 409 is returned if group already exists
  with_items: "{{ ldap_groups }}"
  when: twistlock_version.split('.')[0] != "18"

- name: Update groups (18.11)
# If groups already exist, the POST above returns a 409.  Doing a PUT 
# ensures the config for the group is up to date.
  uri:
    url: "{{ twistlock_console }}/api/v1/groups/{{ item.group }}"
    method: PUT
    user: "{{ console_user }}"
    password: "{{ console_password }}"
    body: '{"role":"{{ item.twistlockgroup }}","ldapGroup":true,"groupName":"{{ item.group }}"}'
    force_basic_auth: yes
    body_format: json
    validate_certs: no
    status_code:
      - 200
      - 409
      # As of 18.11, a PUT here will result in a 409 if no change is made
  with_items: "{{ ldap_groups }}"
  when: twistlock_version.split('.')[0] == "18"

- name: Update groups (19.03+)
# If groups already exist, the POST above returns a 409.  Doing a PUT 
# ensures the config for the group is up to date.
  uri:
    url: "{{ twistlock_console }}/api/v1/groups/{{ item.group }}"
    method: PUT
    user: "{{ console_user }}"
    password: "{{ console_password }}"
    body: '{"role":"{{ item.twistlockgroup }}","ldapGroup":true,"groupName":"{{ item.group }}","collections":[{{ item.twistlockcollections | default() }}]}'
    force_basic_auth: yes
    body_format: json
    validate_certs: no
    status_code:
      - 200
      - 409
      # As of 18.11, a PUT here will result in a 409 if no change is made
  with_items: "{{ ldap_groups }}"
  when: twistlock_version.split('.')[0] != "18"

- name: Remove local users
  uri:
    url: "{{ twistlock_console }}/api/v1/users/{{ item.username }}"
    method: DELETE
    user: "{{ console_user }}"
    password: "{{ console_password }}"
    force_basic_auth: yes
    body_format: json
    validate_certs: no
    status_code:
      - 200
      - 500
      - 404
      # 500 returned if user already doesn't exist
  with_items: "{{ users }}"