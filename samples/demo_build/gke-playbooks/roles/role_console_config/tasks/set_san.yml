
- name: Get existing console SANs
  uri:
    url: "{{ twistlock_console }}/api/v1/settings/certs"
    method: GET
    user: "{{ console_user }}"
    password: "{{ console_password }}"
    force_basic_auth: yes
    return_content: yes
    validate_certs: no
    headers: Content-Type="application/json"
    status_code: 200,400
  register: old_console_san

- name: Get twistlock-console clusterIP
  shell: kubectl get service twistlock-console -n twistlock -o jsonpath='{.spec.clusterIP}'
  register: tl_clusterIP

- name: Enumerate all the SANs, old and new
  set_fact:
    test_SAN: "{{ item }}"
  with_items:
    - "{{ twistlock_console.split('//')[1] }}"
    - "{{ lookup('defender',groups['console'][0], k8s='true').split('//')[1] }}"
    - "{{ (old_console_san.content|from_json).consoleSAN }}"
    - "{{ tl_clusterIP.stdout }}"
  register: testSAN

- debug: var=testSAN

- name: Combine all the SANs
  set_fact:
      consoleSAN: "{{ testSAN.results | map(attribute='ansible_facts.test_SAN') | list }}"


- name: Post new SAN list
  uri:
    url: "{{ twistlock_console }}/api/v1/settings/certs"
    method: POST
    user: "{{ console_user }}"
    password: "{{ console_password }}"
    body: "{ \"consoleSAN\": {{ consoleSAN|to_json }} }"
    force_basic_auth: yes
    body_format: json
    validate_certs: no
    status_code: 200