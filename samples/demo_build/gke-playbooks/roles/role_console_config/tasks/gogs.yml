- name: create a place for gogs
  file: dest="/opt/gogs" owner=root group=root mode=0755 state=directory

- name: role_console_config - include Jenkins project vars
  include_vars: jenkins_projects.yml
  tags:
    - always

- name: Copy gogs yaml
  template:
    src: "gogs/{{ item }}.j2"
    dest: "/opt/gogs/{{ item }}"
  with_items:
    - gogs-app.yml
    - gogs-ingress.yml
    - gogs-postgres.yml
    - app.ini

- name: Create gogs config-map
# This pattern doesn't error out if configmap already exists
  shell: 'kubectl create configmap gogs-app-ini -n infra --from-file /opt/gogs/app.ini --dry-run -o yaml | kubectl apply -f -' 

- name: Create gogs deployment
  shell: kubectl apply -f /opt/gogs/


- name: Generate gogs user array
  set_fact:
    user:
      username: "{{ item.username }}"
      password: "{{ lookup('password', 'files/' + groups['console'][0] + '/creds/' + item.username) }}"
  with_items: "{{ users }}"
  register: user_array

- name: Add users
  shell: "kubectl exec $(kubectl get pod -l app=gogs-app -o jsonpath='{.items[0].metadata.name}' -n infra) -n infra -- su git -c './gogs admin create-user --name={{ item.ansible_facts.user.username }} --password=\"{{ item.ansible_facts.user.password  }}\" --admin=true --email={{ item.ansible_facts.user.username }}@twistlock.local'"
  with_items: "{{ user_array.results }}"
  register: result
  retries: 10
  delay: 20
  failed_when: not (result is succeeded or ("command terminated with exit code 141" in result.stderr) or ("user already exists" in result.stderr))
  until: result is succeeded or ("command terminated with exit code 141" in result.stderr) or ("user already exists" in result.stderr) # user already exists

- debug: var=user_array

- name: Get gogs token
  uri:
    url: "{{ gogs_addr }}/api/v1/users/{{ user_array.results[0].ansible_facts.user.username}}/tokens"
    method: POST
    body_format: json
    user: "{{ user_array.results[0].ansible_facts.user.username }}"
    password: "{{ user_array.results[0].ansible_facts.user.password }}"
    body:
      name: access-token
    force_basic_auth: yes
    status_code: 201
  register: token
  retries: 40
  delay: 10 
  until: token is succeeded

- debug: var=token

- name: Create repos
  uri:
    url: "{{ gogs_addr }}/api/v1/user/repos"
    method: POST
    body_format: json
    body:
      name: "{{ item.folder }}"
    headers:
        Authorization: token {{ token.json.sha1 }}
    status_code: 201, 422 # Repo may already exist
  with_items: "{{ jenkins_demo_projects }}"

- name: Copy git project code
  copy:
    src: files/git-projects/
    dest: /opt/git-projects

- name: Template git project code, too.
  template:
    src: "{{ item.src }}"
    dest: /opt/git-projects/{{ item.path | regex_replace('\.j2','')  }}
  with_filetree: ../templates/git-projects/
  when: item.state == "file"

- name: git init
  shell: git init
  args:
    chdir: "/opt/git-projects/{{ item.folder }}"
  with_items: "{{ jenkins_demo_projects }}"

- name: git credential.helper
  shell: git config credential.helper store
  args:
    chdir: "/opt/git-projects/{{ item.folder }}"
  with_items: "{{ jenkins_demo_projects }}"

- name: Create .git-credentials
  template:
    src: gogs/.git-credentials.j2
    dest: ~/.git-credentials

- name: git add
  shell: git add .
  args:
    chdir: "/opt/git-projects/{{ item.folder }}"
  with_items: "{{ jenkins_demo_projects }}"

- name: git commit
  shell: git commit -m "First commit" --allow-empty
  args:
    chdir: "/opt/git-projects/{{ item.folder }}"
  with_items: "{{ jenkins_demo_projects }}"

- name: git remote remove (make sure we don't have one already) (ignore errors)
  shell: git remote remove origin
  args:
    chdir: "/opt/git-projects/{{ item.folder }}"
  with_items: "{{ jenkins_demo_projects }}"  
  ignore_errors: true

- name: git remote add (ignore errors)
  shell: git remote add origin {{ item.url }}.git
  args:
    chdir: "/opt/git-projects/{{ item.folder }}"
  with_items: "{{ jenkins_demo_projects }}"
  ignore_errors: true 

- name: git push
  shell: git push -u origin master
  args:
    chdir: "/opt/git-projects/{{ item.folder }}"
  with_items: "{{ jenkins_demo_projects }}"

