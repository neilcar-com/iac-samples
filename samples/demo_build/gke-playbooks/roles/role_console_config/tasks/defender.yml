- name: Get twistlock-console clusterIP
  shell: kubectl get service twistlock-console -n twistlock -o jsonpath='{.spec.clusterIP}'
  register: tl_clusterIP

- name: Get defender DS yaml
  get_url:
    url: "{{ twistlock_console }}/api/v1/defenders/daemonset.yaml?consoleaddr={{ tl_clusterIP.stdout }}&listener=none&namespace=twistlock&orchestration=kubernetes&privileged=true&istio=true&serviceaccounts=true"
    url_username: "{{ console_user }}"
    url_password: "{{ console_password }}"
    force_basic_auth: yes
    validate_certs: no
    dest: /opt/defender-ds.yaml

- lineinfile:
    path: /opt/defender-ds.yaml
    line: '      dnsPolicy: ClusterFirstWithHostNet'

- name: Install Defender daemonset YAML
  shell: 'kubectl apply -f /opt/defender-ds.yaml'

- name: Get defenders
  uri:
    url: "{{ twistlock_console }}/api/v1/defenders?type=daemonset"
    method: GET
    user: "{{ console_user }}"
    password: "{{ console_password }}"
    force_basic_auth: yes
    body_format: json
    validate_certs: no
  register: defenders
  until: not(defenders.json is none)
  # Wait until Defenders are actually up
  retries: 10
  delay: 15


- name: Configure Defender as registry & serverless scanner
  uri:
    url: "{{ twistlock_console }}/api/v1/defenders/{{ defenders.json[0].hostname }}/features"
    method: POST
    user: "{{ console_user }}"
    password: "{{ console_password }}"
    body: '{"registryScanner":true,"serverlessScanner":true,"proxyListenerType":"none","proxyTargetType":"docker"}'
    force_basic_auth: yes
    body_format: json
    validate_certs: no
    
- name: Add registry to console config (18.11)
  uri:
    url: "{{ twistlock_console }}/api/v1/settings/registry"
    method: PUT
    user: "{{ console_user }}"
    password: "{{ console_password }}"
    body: '{"specifications":[{"registry":"","repository":"library/httpd","tag":"latest","cap":5,"os":"linux","hostname":"{{ defenders.json[0].hostname }}","namespace":"","useAWSRole":false,"version":"2","credential":{"_id":"","type":"","accountID":"","accountGUID":"","secret":{"encrypted":""},"apiToken":{"encrypted":""}},"roleArn":"","index":0}, {"registry":"registry.infra.svc.cluster.local:5000","repository":"","tag":"","cap":5,"isNew":true,"os":"linux","hostname":"{{ defenders.json[0].hostname }}","namespace":"","useAWSRole":false,"version":"2","credential":{"_id":"","type":"","accountID":"","accountGUID":"","secret":{"encrypted":""},"apiToken":{"encrypted":""}},"roleArn":"","index":0},{"version":"aws","registry":"{{ aws_registry_url }}","credential":{"_id":"AWS"},"useAWSRole":false,"os":"linux","cap":5,"isNew":true,"hostname":"{{ defenders.json[0].hostname }}","index":2}],"webhookUrlSuffix":"PBMNNaHQxxUoMSFf8-9AcsieoRk="}'
    force_basic_auth: yes
    body_format: json
    validate_certs: no
  ignore_errors: false

- name: Add serverless to console config (up to 2.5)
  uri:
    url: "{{ twistlock_console }}/api/v1/settings/serverless"
    method: POST
    user: "{{ console_user }}"
    password: "{{ console_password }}"
    body: '[{"provider":"aws","region":"us-east-1","cap":25,"useAWSRole":false,"isNew":true,"username":"{{ aws_access_key_id }}","password":{"plain":"{{ aws_secret_access_key }}"},"index":0}]'
    force_basic_auth: yes
    body_format: json
    validate_certs: no
  ignore_errors: true
  when: twistlock_version.split('.')[0] == "2"



- name: Add serverless to console config (18.11+)
  uri:
    url: "{{ twistlock_console }}/api/v1/settings/serverless"
    method: POST
    user: "{{ console_user }}"
    password: "{{ console_password }}"
    body: '[{"provider":"aws","region":"us-east-1","cap":35,"useAWSRole":false,"credential":{"_id":"AWS"},"isNew":true,"index":0}]'
    force_basic_auth: yes
    body_format: json
    validate_certs: no
  ignore_errors: true
  when: twistlock_version.split('.')[0] != "2"
  
- set_fact:
    registry: "registry.infra.svc.cluster.local:5000"


- name: Populate registry
  docker_image:
    name: "{{ item }}"
    repository: "registry.infra.svc.cluster.local:5000/{{ item }}"
    push: yes
  with_items:
    - "{{ registry_images }}"
  async: 1000
  poll: 0
