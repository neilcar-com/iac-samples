- name: Generate Jenkins user array
  set_fact:
    user:
      username: "{{ item.username }}"
      password: "{{ lookup('password', 'files/' + groups['console'][0] + '/creds/' + item.username) }}"
  with_items: "{{ users }}"
  register: user_array

- include_vars: jenkins_projects.yml
  tags:
    - always

- name: Copy the jenkins plugin.hpi
  copy:
    remote_src: yes
    src: "{{ ansible_user_dir }}/twistlock/twistlock-jenkins-plugin.hpi"
    dest: "/opt/jenkins/twistlock-jenkins-plugin.hpi"

- name: Create Jenkins user
  uri:
    url: "{{ twistlock_console }}/api/v1/users"
    method: POST
    user: "{{ console_user }}"
    password: "{{ console_password }}"
    body: '{"username": "jenkins", "password": "{{ new_password }}", "role": "ci", "isNew": true, "authType": "basic"}'
    force_basic_auth: yes
    body_format: json
    validate_certs: no
    status_code: 200,409
        # We are ignoring errors here as user may already exist if this task is being re-run.
  retries: 5
  delay: 2

# - name: "Installing Java"
#   apt: name=default-jre state=latest
#   delegate_to: localhost

- name: Copy Jenkins config scripts
  template:
    src: jenkins/config.groovy.j2
    dest: /opt/jenkins/config.groovy

- name: Copy Twistlock plugin config
  template:
    src: jenkins/org.jenkinsci.plugins.twistlock.builder.xml.j2
    dest: /opt/jenkins/org.jenkinsci.plugins.twistlock.builder.xml

- name: Copy Dockerfile for jenkins
  template:
    src: jenkins/Dockerfile.j2
    dest: /opt/jenkins/Dockerfile



- name: Create local dir for projects
  file:
    path: /tmp/jenkins
    state: directory
    mode: 0755
  delegate_to: localhost

- name: Copy demo job config.xmls
  template:
    src: jenkins/config.xml.j2
    dest: "/tmp/jenkins/{{ item.name }}.xml"
  with_items:
    - "{{ jenkins_demo_projects }}"
  delegate_to: localhost

- name: Copy view config.xmls
  template:
    src: jenkins/views.xml.j2
    dest: "/tmp/jenkins/{{ item.name }}_view.xml"
  with_items:
    - "{{ jenkins_views }}"
  delegate_to: localhost

- name: Copy env_vars.groovy
  template:
    src: jenkins/env_vars.groovy.j2
    dest: /tmp/jenkins/env_vars.groovy
  delegate_to: localhost

- name: Create creds xml
  template:
    src: jenkins/{{ item }}.j2
    dest: /tmp/jenkins/{{ item }}
  delegate_to: localhost
  with_items:
    - twistlock_creds.xml
    - AWS_creds.xml
    - Twistlock_SSH_creds.xml
    - k8s_creds.xml

# building with docker commands instead of
# ansible native tasks because
# Twistlock unix socket seems
# to break ansible
- name: Build jenkins container
  command: "docker build /opt/jenkins -t registry.infra.svc.cluster.local:5000/infra/my_jenkins"

- name: Push jenkins container to registry
  command: "docker push registry.infra.svc.cluster.local:5000/infra/my_jenkins"

- name: Copy jenkins yaml
  template:
    src: jenkins/jenkins.yml.j2
    dest: /opt/jenkins.yml

- name: Create jenkins pod
  shell: kubectl apply -f /opt/jenkins.yml
  when: twistlock_console_k8s

# 20181203 - pfox - set the Jenkins PV retentionPolicy to retain 
# - name: Get Jenkins PV Name 
#   command: "kubectl get pvc jenkinshome -n infra -o jsonpath='{.spec.volumeName}'"
#   register: PVCresult
#   until: PVCresult.stdout != ""
#   retries: 5
#   delay: 10

# - debug: msg="{{ PVCresult.stdout }}"
#   when: twistlock_console_k8s

#- name: Patch Console PV retentionPolicy
#  command: "kubectl patch pv {{ PVCresult.stdout }} -p '{\"spec\":{\"persistentVolumeReclaimPolicy\":\"Retain\"}}'"
#  when: twistlock_console_k8s

- name: "Update known_hosts for Jenkins"
  shell: "ssh-keyscan -p 8022 {{ groups['console'][0] }}"


- name: "Install Twistlock plugin"
  shell: "ssh {{ console_user }}@{{ groups['console'][0] }} -i {{ ansible_ssh_private_key_file }} -p 8022 -o StrictHostKeyChecking=no install-plugin file:/tmp/twistlock-jenkins-plugin.hpi -deploy"
  register: result
  retries: 10
  delay: 10
  ignore_errors: true
  until: result is succeeded or ("already exists" in result.stderr)
  delegate_to: localhost

- name: Create creds
  shell: "ssh {{ console_user }}@{{ groups['console'][0] }} -i {{ ansible_ssh_private_key_file }} -p 8022 -o StrictHostKeyChecking=no create-credentials-by-xml \"SystemCredentialsProvider::SystemContextResolver::jenkins\" \"(global)\"< /tmp/jenkins/{{ item }}.xml"
  register: result
  retries: 10
  delay: 10
  ignore_errors: true
  until: result is succeeded or ("already exists" in result.stderr) or ("No change" in result.stderr_lines)
  delegate_to: localhost
  with_items:
    - twistlock_creds
    - Twistlock_SSH_creds
    - AWS_creds
    - k8s_creds

# nodePort for Jenkins is hard-coded to 25001
# Doing this from Console so that we can avoid the nginx auth
# Using HTTP to do this instead of SSH as there doesn't seem to be a way
# to do this from the SSH CLI
# (There probably is but this works - Neil)

- name: Get crumb for Jenkins CSRF protection
  uri:
    url: "http://127.0.0.1:25001/crumbIssuer/api/json"
    method: GET
    user: "{{ console_user }}"
    password: "{{ console_password }}"
    force_basic_auth: yes
    validate_certs: no
    return_content: yes
  register: crumb
  delegate_to: "{{ groups['k8s-master'][0] }}"

# - debug: var=crumb

- name: Create TL_CONSOLE env var
  uri:
    url: "http://127.0.0.1:25001/scriptText"
    method: POST
    user: "{{ console_user }}"
    password: "{{ console_password }}"
    force_basic_auth: yes
    validate_certs: no
    body: script={{ lookup('template', 'jenkins/env_vars.groovy.j2') }}
    body_format: form-urlencoded
    headers:
      Jenkins-Crumb: "{{ crumb.json.crumb }}"
  delegate_to: "{{ groups['k8s-master'][0] }}"

- name: Create Jenkins projects
  shell: "ssh {{ console_user }}@{{ groups['console'][0] }} -i {{ ansible_ssh_private_key_file }} -p 8022 -o StrictHostKeyChecking=no create-job {{ item.name }}< /tmp/jenkins/{{ item.name }}.xml"
  with_items:
     - "{{ jenkins_demo_projects }}"
  delegate_to: localhost
  register: result
  retries: 10
  delay: 10
  ignore_errors: true
  until: result is succeeded or ("already exists" in result.stderr)

- debug: var=item
  with_items:
     - "{{ jenkins_views }}"

- name: Create Jenkins views
  shell: "ssh {{ console_user }}@{{ groups['console'][0] }} -i {{ ansible_ssh_private_key_file }} -p 8022  -o StrictHostKeyChecking=no create-view < /tmp/jenkins/{{ item.name }}_view.xml"
  with_items:
     - "{{ jenkins_views }}"
  delegate_to: localhost
  register: result
  retries: 10
  delay: 10
  ignore_errors: true
  until: result is succeeded or ("already exists" in result.stderr)  

- name: Add jobs to views
  shell: "ssh {{ console_user }}@{{ groups['console'][0] }} -i {{ ansible_ssh_private_key_file }} -p 8022  -o StrictHostKeyChecking=no add-job-to-view {{item.view}} {{item.name}}"
  with_items:
     - "{{ jenkins_demo_projects }}"
  delegate_to: localhost
  register: result
  retries: 10
  delay: 10
  ignore_errors: true
  until: result is succeeded or ("already exists" in result.stderr)  
