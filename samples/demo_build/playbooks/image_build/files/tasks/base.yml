- name: create a place for docker config
  file: dest="/etc/docker" owner=root group=root mode=0755 state=directory

- name: Clean out yum (CentOS)
  command: yum clean all
  when: ansible_distribution=="CentOS"

- name: "Updating repositories"
  apt:
    update_cache: yes
  when: ansible_distribution=="Ubuntu"   

- name: "Installing Aptitude"
  apt: name=aptitude state=latest
  when: ansible_distribution=="Ubuntu"   
  
- name: "Installing dependencies"
  apt: 
    name: "{{ packages }}" 
    state: latest
  when: ansible_distribution=="Ubuntu"
  vars:
    packages:
    - init-system-helpers
    - lsb-base
    - libc6
    - libdevmapper1.02.1
    - libltdl7
    - libseccomp2
    - libsystemd0
    - aufs-tools
    - cgroupfs-mount
    - pigz
    - apache2-utils
    - default-jre

# The dpkg lock file typically exists so can't just check for its presence.
# A "wait for lock" feature has been added to the apt module but it hasn't made
# it to mainline yet.
# see - https://github.com/ansible/ansible/issues/16593
- name: Wait for apt to release the dpkg lock file
  shell: fuser /var/lib/dpkg/lock >/dev/null 2>&1
  register: lock_check
  failed_when: lock_check.rc == 0
  until: lock_check.rc == 1
  retries: 15
  delay: 5
  become: true

- name: Update the OS
  apt:
    upgrade: yes
    update_cache: yes

- name: "Removing superfluous dependencies"
  apt:
    autoremove: yes
    autoclean: yes
  when: ansible_distribution=="Ubuntu"   

- name: Download Docker install script
  get_url: 
    url: http://get.docker.com 
    dest: /opt/get-docker.sh 

- name: Download Docker .deb since 18.05 is broke
  get_url:
    url: "{{ docker_dl_url }}/{{ docker_pkg }}"
    dest: "/root/{{ docker_pkg }}"

- name: Install Docker
  # command: sh /opt/get-docker.sh
  command: "dpkg -i /root/{{ docker_pkg }}"

- name: let's set docker to be available to nonroot
  group: name=docker state=present

- name: Set various services to be running and to restart on reboot
  service: name={{ item }} state=started enabled=true
  with_items:
      - docker

- name: "Install mosh"
  apt: name=mosh state=latest

- name: Add user to Docker group
  user: name={{ ansible_user  }}
        group=docker
        append=yes

# Leaving this in even though it breaks starting at one of the tasks below
# This isn't somewhere folks would normally restart and the alternatives are 
# more difficult
- name: Get host name
  set_fact: target_host={{ ansible_host }}

- name: Check if this is an image_build
# No need to reboot when building a base image 
# And packer tends to be freaked out by the reboot
  set_fact:
    image_build: "{{ lookup('env','IMAGE_BUILD') | default('false') }}"

- name: restart host
  shell: sleep 2 && shutdown -r now "Ansible updates triggered"
  async: 1
  poll: 0
  ignore_errors: true
  become: yes
  when: image_build == false
  

- name: Shutdown
  pause: seconds=50
  delegate_to: localhost
  when: image_build == false

- name: Wait for SSH for instance {{ ansible_host }}
  wait_for:
    delay: 1
    host: "{{ target_host }}"
    port: 22
    state: started
    timeout: 600
  delegate_to: localhost
  when: image_build == false
