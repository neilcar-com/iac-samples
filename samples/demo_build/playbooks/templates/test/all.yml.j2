
test_run: {{ test_run }}
# things you need to set immediately
# Set target_user to your GCE username -- neil, for example
target_user: {{ target_user }}
# This password will be used for console, Jenkins, and Splunk
new_password: {{ new_password }}
# This e-mail address is used for LetsEncrypt.
emailaddr: {{ target_user }}@twistlock.com

# Users
# Set password: to '..generate..' to automatically
# generate a password for the user.
# Otherwise, set password: to the password you want
# for the user.

# In most cases, it's better to use generated passwords and
# retrieve them from your portal post-build

# WARNING:  Don't use ' (single quotes) in your passwords.  Things will break.

users:
  - username: {{ target_user }}
    fullname: Twistlock User
    password: {{ new_password }}
    groups:
      - admins
      - secops
  - username: pierre
    fullname: Pierre D. Fox
    password: ..generate..
    groups:
      - admins
      - devops
  - username: frodo
    fullname: Frodo B. Fox
    password: ..generate..
    groups:
      - secops
  - username: ginger
    fullname: Ginger B. Fox
    password: ..generate..
    groups:
      - auditor

# Change this to your service account (get it from GCP, generate your own key)
# Be sure to copy the downloaded service account JSON key into files/
{% if test_run == true %}
service_account_email: neilcar-ansible-svc@cto-sandbox.iam.gserviceaccount.com
credentials_file: /etc/ansible/twistlock-cto-lab.json
{% else %}
service_account_email: {{ target_user }}-ansible-svc@cto-sandbox.iam.gserviceaccount.com
credentials_file: twistlock-cto-lab.json
{% endif %}

# Set this to your own sub-domain root
domain_root: {{ target_user }}.lab.twistlock.com
# Leave this unless you're creating
# partner projects
# dns_zone: lab.twistlock.com

# Your token, used for Twistlock registry access
twistlock_registry_token: {{ twistlock_registry_token }}
twistlock_license: {{ twistlock_license }}

###############################
# Other configuration options #
###############################

# GCE parameters
# us-central1 is your friend.  Change these only if you have a good reason
# region: us-central1
# zone: us-central1-a
# project_id: cto-sandbox
# # Currently untested with anything but ubuntu-1604.
# # If you test this with CentOS, let me know how it goes.

# # Suggested configuration is to use prebuilt_image: true
# # and use the demo-build images that have all the pre-reqs.
# image: demo-build
# prebuilt_image: true

# # Windows Server 2019 built with twistlock_ansible_2019 keys associated with the .\twistlock admin account. The SSH keys are in ./files
# windowsimage: "https://www.googleapis.com/compute/v1/projects/cto-sandbox/global/images/windows2019-demo-build-v2"


# AWS parameters
# These are now static unless you maintain your own and will be used for registries/serverless/fargate
# aws_access_key_id: AKIAISYP7JO7DYCDIKPA
# aws_secret_access_key: DW1VtA4Leun8TBY91XLXqHWMcUV8ihyit0SJNHy/

# # Twistlock install parameters
# # twistlock_release_url points to a publicly available URL to download a tarball.
# # If you're so inclined, you can figure out how to get a public URL
# # to prelease bits on GDrive and put it here...
# twistlock_release_url: https://cdn.twistlock.com/releases/380f258e/twistlock_2_5_127.tar.gz
# # I find it easier to use a local path.  If twistlock_install_prerelease == true,
# # the playbook will copy the file from this path.
# # This is a bit of a burden if you're on a low-bandwidth line.
# twistlock_prerelease_path: /Volumes/GoogleDrive/Team Drives/Releases/
# # Set twistlock_prerelease_version to 'latest' to take the newest tar.gz in the twistlock_prerelease_path directory.  Set it to a
# # specific filename like '_2_4_55.tar.gz' to install a specific version.
# twistlock_prerelease_version: latest
# twistlock_install_prerelease: false


# Twistlock collections
# Change these defaults if you wish to
# automatically create other collections.
# twistlock_collections:
#     - name: Twistlock
#       images: 'docker.io/twistlock/private:*'
#       containers: '*'
#       hosts: '*'
#       labels: '*'
#       color: '#ff00ff'
#       description:  Twistlock images and containers

# SIEM options
# enable_splunk: true
# splunk_token: "Anál nathrach, orth' bháis's bethad, do chél dénmha"
# enable_sumo: false
# sumo_access_id: 1234
# sumo_access_key: 4567

# Jenkins parameters
# jenkins_demo_projects:
# # Point to any Jenkins pipeline projects
# # in GitHub.  I've put these two together
# # to use in my demos.
#     - name: Struts-Demo
#       url: https://github.com/neilcar/struts2_demo
#     - name: HelloNode
#       url:  https://github.com/neilcar/docker-test

# Vault Secrets
# All secrets created in the secret/ area
# vault_secrets:
#   - name: TestPassword
#     key: pass
#     value: Above110thStreet
#   - name: TestCert
#     key: cert
#     value: "-----BEGIN RSA PRIVATE KEY-----MIIEpAIBAAKCAQEA+JVtgztHots6Jhz+T5TP4FP6yKE1W7gW69PeuPC9vCA1aOFUm6wMKxdWKXnoodkSqzfSXyU//ugKeRvcJ+I+MWlNt1610RSWm3rQ51jMWwFmdczonM0WswfDEkYKo14xPsSsg87njwlM3X6OgpFNsM5ym7YkdQk0WT7Yz7EJFuQqYKsg1nGjYWVq8HSCmBsmJ4nKsP4x8lzIZ1rI+lN8SAjuc+L8uo57dLpn089js7F2KhoTzSXY7iD/hmhkYesU8xD4UxJxcqFXSfwXIAnsCOIBXZgl8gswCWPB5wVAe0j3aFsNEGULzr2q7h9nnHmXtXYMGzvcTL6b3CW9oNdf1wIDAQABAoIBAQD3sESnbyjI7/H3ygnoF9otpuAKiv7UvhAwuTKCSnZzfhBZybP5TSvuv9j9iNgwdE/yxLNcVIx4nJLa69So9PiNWWSzoq49f2s1zuFasxMkVrfWBu98VaoZh1Fq4tl0wMUGywcuaro1vsmVJaYwGUI1Ou/dkVawOxSrHEECaV8qKwYCre8iWP/Mfmwhhc/uY+lKDycu+rMDoSStJqF1klNVeuFpmaHrps1q+lmS/jhSGFFae9Hiy16RTDE33H/dUrgwQSnKdwjVBJhe03ksVOpG+DZnFSuQ3RgF+hYo+1EZcfe/x90yoQz/gH4yLpqSfTKijQXVqmYDpYpTbbD4zlcJAoGBAP8LhKbx1vos65kd2Fy+Pvw14oHjxO0vyatqQqRW8E5s3dEtPFC2UvrY3aLM6GDjVkCTI2QyIpnUQp+wwUBgJz11xaHKyaN5YuIgqW+d3lpVfoRC0TsVsAtwRa5T0qefdnalTMYSyh4VHV+2df+YYQnuTTxUHdnJRvB2wCrPftLlAoGBAPmDt0cAmzuVWod5alOpth9X87/ASIHBPLpiSLmf8z0xcRif5o4jhYB39AnVuRJUSK0g5SEemcjtuRcX0yqyFRyUvoM2rA/KnDjYiKYTDHmMVSWRH/v5B841vr7tbPJXM7HJT2fMOlpx3+/xMux/nixP8Lbllr+rD3XDMajC/hALAoGBAMIpHp+JVMO4FtPGKMTSAFk5HGsN3wlCbCEXEAzUMrVBo8xux5AafSmCl5gsrmu0JiGa4kKQ+E5rjRzNDxHXIYhkdEQrgT32VxUXEGZspK3YkCxYQbjdVdwfaKzCG4iImULRrJTOERi9slL/MO2YL6fDxwC6eM8nr924SatNs5sRAoGACBoOyW9rmvOujNeUbEMGdt4UPBWyRQRRRHwMgHqBG2uPkI0gn1zn6NP8SJV3/PBfq791sS2dMLkHWYicgrZlmRf7V6dezuR1TiM5zKqxrQCxgxbDQxtC9Z8pImnzL6tFMnCm82fePTGVY+UhEizSpf2ygz3RN0gGqHw+EIzEUyECgYBmalO1tV3WXD+BxPpt70JsX0qi6D6KBzC1WAIa4yH1P3ky3JwSYFo2AMJEMfhJM7JBsQYU0RGVSTWndqjiGVvyvkUZOgxyQmBIySrFSrd1G5waVnKMpB+7Syvh9o5A9DYw/aHyQmuPSPmLo8PZDHW34xc3Y80prtIOJZedAHJ5iA==-----END RSA PRIVATE KEY-----"


# secretname comes from the name in the vault_secrets section
# secretkey comes from the key in the vault_secrets section
# name is either the env variable or the filename
# injection is either envvar or filesystem
# Secret Rules
# secrets_rules:
#   - rule_name: TestPassword
#     images: busybox*
#     secretname: TestPassword
#     secretkey: pass
#     injection: envvar
#     name: TEST_PASS

#   - rule_name: TestCert
#     images: ubuntu*
#     secretname: TestCert
#     secretkey: cert
#     injection: filesystem
#     name: test_cert.pem

# misc

# Images in this list are automatically pushed
# to the local registry.
# registry_images:
#   - alpine
#   - servethehome/monero_cpu_minergate
#   - infoslack/dvwa
#   - clockworksoul/zork1

# custom_compliance_benchmarks:
#   - name: Check hosts file exists (Linux)
#     title: Check that /etc/hosts exists (Linux)
#     script: "if [ ! -f /etc/hosts ]; then\n    echo \"File not found!\"\n    exit 1\nfi"
#     severity: high
