apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: console-ingress
  namespace: twistlock
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: 'true'
    nginx.org/proxy-buffering: 'false'
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-body-size: 2G
    nginx.ingress.kubernetes.io/client-max-body-size: 2G
    nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
    ingress.kubernetes.io/ssl-redirect: "false"
    ingress.kubernetes.io/proxy-body-size: 2G
    ingress.kubernetes.io/client-max-body-size: 2G
    ingress.kubernetes.io/proxy-request-buffering: "off"
    nginx.org/ssl-redirect: "false"
    nginx.org/proxy-body-size: 2G
    nginx.org/client-max-body-size: 2G
    nginx.org/proxy-request-buffering: "off"
spec:
  rules:
  - host: console-{{ groups['k8s-master'][0] }}
    http:
      paths:
      - path: /
        backend:
          serviceName: twistlock-console
          servicePort: 8081
  tls:
  - secretName: console-cert
    hosts:
    - console-{{ groups['k8s-master'][0] }}

---
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: defender-ingress
  namespace: twistlock
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: 'true'
    nginx.org/websocket-services: "ws-svc"
spec:
  rules:
  - host: defender-{{ groups['k8s-master'][0] }}
    http:
      paths:
      - path: /
        backend:
          serviceName: twistlock-console
          servicePort: 8084
  tls:
  - secretName: console-cert
    hosts:
    - defender-{{ groups['k8s-master'][0] }}

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: sockshop-ingress
  namespace: sock-shop
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: 'true'
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: sockshop-{{ groups['k8s-master'][0] }}
    http:
      paths:
      - path: /
        backend:
          serviceName: front-end
          servicePort: 80
  tls:
  - secretName: console-cert
    hosts:
    - sockshop-{{ groups['k8s-master'][0] }}

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: k8sui-ingress
  namespace: kube-system
  annotations:
    kubernetes.io/ingress.class: nginx
    ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.org/auth-type: basic
    nginx.org/auth-secret: basic-auth
    nginx.org/auth-realm: "Authentication Required"
    nginx.ingress.kubernetes.io/backend-protocol: 'HTTPS'
spec:
  rules:
  - host: k8s-{{ groups['k8s-master'][0] }}
    http:
      paths:
      - path: /
        backend:
          serviceName: kubernetes-dashboard
          servicePort: 443
  tls:
  - secretName: console-cert
    hosts:
    - k8s-{{ groups['k8s-master'][0] }}

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: dvwa-ingress
  namespace: dvwa
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: 'true'
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: basic-auth
    nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
    nginx.org/auth-type: basic
    nginx.org/auth-secret: basic-auth
    nginx.org/auth-realm: "Authentication Required"
spec:
  rules:
  - host: dvwa-{{ groups['k8s-master'][0] }}
    http:
      paths:
      - path: /
        backend:
          serviceName: dvwa
          servicePort: 8050
  tls:
  - secretName: console-cert
    hosts:
    - dvwa-{{ groups['k8s-master'][0] }}
---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: splunk-ingress
  namespace: infra
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: 'true'
spec:
  rules:
  - host: splunk-{{ groups['k8s-master'][0] }}
    http:
      paths:
      - path: /
        backend:
          serviceName: splunk
          servicePort: 8000
  tls:
  - secretName: console-cert
    hosts:
    - splunk-{{ groups['k8s-master'][0] }}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: splunk-evt-ingress
  namespace: infra
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: 'true'
spec:
  rules:
  - host: splunkevt-{{ groups['k8s-master'][0] }}
    http:
      paths:
      - path: /
        backend:
          serviceName: splunkhttpevt
          servicePort: 8088
  tls:
  - secretName: console-cert
    hosts:
    - splunkevt-{{ groups['k8s-master'][0] }}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: jenkins-ingress
  namespace: infra
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: 'true'
    nginx.org/proxy-buffering: 'false'
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-body-size: 2G
    nginx.ingress.kubernetes.io/client-max-body-size: 2G
    nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
    ingress.kubernetes.io/ssl-redirect: "false"
    ingress.kubernetes.io/proxy-body-size: 2G
    ingress.kubernetes.io/client-max-body-size: 2G
    ingress.kubernetes.io/proxy-request-buffering: "off"
    nginx.org/ssl-redirect: "false"
    nginx.org/proxy-body-size: 2G
    nginx.org/client-max-body-size: 2G
    nginx.org/proxy-request-buffering: "off"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: basic-auth
    nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
    nginx.org/auth-type: basic
    nginx.org/auth-secret: basic-auth
    nginx.org/auth-realm: "Authentication Required"
    # applying all the options to allow for unbuffered requests
    # necessary for jenkins-cli
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-SSH-Endpoint: {{ groups['k8s-master'][0] }}:8022";
    # Enabling header for CLI ssh connectivity
spec:
  rules:
  - host: jenkins-{{ groups['k8s-master'][0] }}
    http:
      paths:
      - path: /
        backend:
          serviceName: jenkins
          servicePort: 8080
  tls:
  - secretName: console-cert
    hosts:
    - jenkins-{{ groups['k8s-master'][0] }}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: bookinfo-ingress
  namespace: bookinfo
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: 'true'
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: basic-auth
    nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
    nginx.org/auth-type: basic
    nginx.org/auth-secret: basic-auth
    nginx.org/auth-realm: "Authentication Required"
spec:
  rules:
  - host: bookinfo-{{ groups['k8s-master'][0] }}
    http:
      paths:
      - path: /
        backend:
          serviceName: productpage
          servicePort: 9080
  tls:
  - secretName: console-cert
    hosts:
    - bookinfo-{{ groups['k8s-master'][0] }}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: grafana-ingress
  namespace: monitoring
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: 'true'
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: basic-auth
    nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
    nginx.org/auth-type: basic
    nginx.org/auth-secret: basic-auth
    nginx.org/auth-realm: "Authentication Required"
spec:
  rules:
  - host: grafana-{{ groups['k8s-master'][0] }}
    http:
      paths:
      - path: /
        backend:
          serviceName: grafana
          servicePort: 3000
  tls:
  - secretName: console-cert
    hosts:
    - grafana-{{ groups['k8s-master'][0] }}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: prometheus-ingress
  namespace: monitoring
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: 'true'
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: basic-auth
    nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
    nginx.org/auth-type: basic
    nginx.org/auth-secret: basic-auth
    nginx.org/auth-realm: "Authentication Required"
spec:
  rules:
  - host: prometheus-{{ groups['k8s-master'][0] }}
    http:
      paths:
      - path: /
        backend:
          serviceName: prometheus
          servicePort: 9090
  tls:
  - secretName: console-cert
    hosts:
    - prometheus-{{ groups['k8s-master'][0] }}
