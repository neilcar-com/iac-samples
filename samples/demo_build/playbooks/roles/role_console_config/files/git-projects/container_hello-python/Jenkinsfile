node {
    def app

    stage('Clone repository') {
        /* Let's make sure we have the repository cloned to our workspace */

        checkout scm
    }

    stage('Build image') {
        /* This builds the actual image; synonymous to
         * docker build on the command line */

        app = docker.build("tl_demo/hellopython:${env.BUILD_ID}")

    }

    stage('Scan image') {

        twistlockScan ca: '', cert: '', gracePeriodDays: 60, compliancePolicy: 'warn', dockerAddress: 'unix:///var/run/docker.sock', ignoreImageBuildTime: true, image: "tl_demo/hellopython:${env.BUILD_ID}", key: '', logLevel: 'true', policy: 'warn', requirePackageUpdate: false, timeout: 10

    }
    
    stage('Publish scan results') {
        twistlockPublish ca: '', cert: '', compliancePolicy: 'low', image: "tl_demo/hellopython:${env.BUILD_ID}", dockerAddress: 'unix:///var/run/docker.sock', key: '', ignoreImageBuildTime: true, logLevel: 'true', timeout: 10
 
        // Get the scan results as CSV from the scans/download API endpoint
        withCredentials([usernamePassword(credentialsId: 'twistlock_creds', passwordVariable: 'TL_PASS', usernameVariable: 'TL_USER')]) {
        	sh 'curl -o twistlock_scan-$BUILD_TAG-temp.json -s -k -u $TL_USER:$TL_PASS "https://$TL_CONSOLE/api/v1/scans?type=jenkins&jobName=$JOB_NAME&build=$BUILD_ID"'
        }

		// Pretty up our json
		sh 'jq "." twistlock_scan-$BUILD_TAG-temp.json > twistlock_scan-$BUILD_TAG.json'
    }
    
    stage('Test image') {

        app.inside {
            sh 'echo "Tests passed"'
        }
    }

    stage('Push image') {
        /* Finally, we'll push the image with two tags:
         * First, the incremental build number from Jenkins
         * Second, the 'latest' tag.
         * Pushing multiple tags is cheap, as all the layers are reused. */
        docker.withRegistry('http://registry.infra.svc.cluster.local:5000') {
            app.push("${env.BUILD_NUMBER}")
            app.push("latest")
        }
    }

    stage('Collect artifacts') {
        // Add scan results CSV as a build artifact
        archiveArtifacts "twistlock_scan-${env.BUILD_TAG}.json"
    }
}