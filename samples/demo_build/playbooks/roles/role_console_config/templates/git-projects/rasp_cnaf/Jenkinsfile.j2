node {

stage('Clean') {
        sh 'rm *.zip || true'
        sh 'rm *.tar || true'

    }

stage('Clone repository') {
/* Let's make sure we have the repository cloned to our workspace */
        checkout scm
    }

	stage('Ensure CNAF RASP rule exists') {
        withCredentials([usernamePassword(credentialsId: 'twistlock_creds', passwordVariable: 'TL_PASS', usernameVariable: 'TL_USER')]) {
			sh 'curl -s -k -u $TL_USER:$TL_PASS https://$TL_CONSOLE/api/v1/policies/firewall/app/rasp -X PUT -H "Content-Type:application/json" --data-binary "@cnaf_rule.json"'				
        }
	}



    stage('Embed RASP Defender') {
        withCredentials([usernamePassword(credentialsId: 'twistlock_creds', passwordVariable: 'TL_PASS', usernameVariable: 'TL_USER')]) {
            sh 'curl -k -u $TL_USER:$TL_PASS --output ./twistcli https://$TL_CONSOLE/api/v1/util/twistcli'
            sh 'sudo chmod a+x ./twistcli'        
            sh './twistcli rasp embed --console-host $TL_CONSOLE -address https://$TL_CONSOLE -u $TL_USER -p $TL_PASS --data-folder /twistlock/ --output-file rasp-cnaf.zip --app-id rasp-cnaf Dockerfile'
        } 
    }
    

    stage('Build Image') {
        unzip dir: 'rasp-cnaf/', glob: '', zipFile: 'rasp-cnaf.zip'
        app = docker.build("rasp-cnaf:${env.BUILD_ID}", "./rasp-cnaf/")
        sh "docker save rasp-cnaf:${env.BUILD_ID} > rasp-cnaf-${env.BUILD_ID}.tar"
    }

     
 

    stage('Publish Container') {
 		sshagent (credentials: ['bb4af5c8-29c5-4063-b318-0e62f75700ca']) {
             // ensure old copies are stopped/removed
			sh "ssh -o StrictHostKeyChecking=no {{ target_user }}@{{ groups['task-runner'][0] }} docker stop rasp-cnaf | true"
            sh "ssh -o StrictHostKeyChecking=no {{ target_user }}@{{ groups['task-runner'][0] }} docker rm rasp-cnaf | true"

            // copy our exported image
            sh "ssh -o StrictHostKeyChecking=no {{ target_user }}@{{ groups['task-runner'][0] }} docker load < ./rasp-cnaf-${env.BUILD_ID}.tar"

            // run image -- port 8888 is exposed by the RASP CNAF rule
			sh "ssh -o StrictHostKeyChecking=no {{ target_user }}@{{ groups['task-runner'][0] }} docker run --name rasp-cnaf -d -p 8888:8888 rasp-cnaf:${env.BUILD_ID}"
			sh "ssh -o StrictHostKeyChecking=no {{ target_user }}@{{ groups['task-runner'][0] }} docker logs rasp-cnaf"

        }
   	}
              
   	stage('Generate alerts') {
        sshagent (credentials: ['bb4af5c8-29c5-4063-b318-0e62f75700ca']) {
            sh 'sleep 30'
            
            // Malformed request
            sh "ssh -o StrictHostKeyChecking=no {{ target_user }}@{{ groups['task-runner'][0] }} curl -sv -X GET http://localhost:8888/ -d 'foo'"

            // File upload
            sh "ssh -o StrictHostKeyChecking=no {{ target_user }}@{{ groups['task-runner'][0] }} curl -sv -o ./mimipenguin https://raw.githubusercontent.com/huntergregal/mimipenguin/master/mimipenguin"
            sh "ssh -o StrictHostKeyChecking=no {{ target_user }}@{{ groups['task-runner'][0] }} curl -sv -F 'uploaded=@./mimipenguin http://localhost:8888/vulnerabilities/upload/'"
        }
   	}

}
